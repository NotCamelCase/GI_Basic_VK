#version 450

#define INFINITY    (1e+300 * 1e+300)
#define EPSILON     1.192092896e-07F

// Local workgroup size
#define LOCAL_SIZE 16

// Frame dimensions
#define WIDTH 1024.f
#define HEIGHT 720.f

#define M_PI 3.14159265358979323846f
#define FOV (M_PI / 3.5f)

// # of ray bounces & samples taken
#define MAX_DEPTH   5
#define NUM_SAMPLES 64

#define NUM_SPHERES 6
#define NUM_PLANES  2

#define MATERIAL_DIFFUSE  0
#define MATERIAL_SPECULAR 1
#define MATERIAL_REFRACT  2

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
layout (binding = 0, rgba8) uniform writeonly image2D u_result_image;

struct Primitive
{
    vec3  m_Position;
    float m_Distance;
    int   m_MatType;
    vec3  m_Kd;
    vec3  m_Le;
};

Primitive g_Primitives[] =
{
    // Spheres
    { vec3(-0.80, -.25, -2.5),    .5f, MATERIAL_DIFFUSE, vec3(1.0f, 0.f, 0.f), vec3(0, 0, 0)         },
    { vec3(1.95, 0., -4.f),       .6f, MATERIAL_SPECULAR, vec3(.25f, .5f, 0.025f), vec3(0, 0, 0)     },
    { vec3(0.35, -0.495, -1.75),  .29f, MATERIAL_REFRACT, vec3(1.f, 1.f, 0.f), vec3(0, 0, 0)     },
    { vec3(0.250, -0.125, -3.55), .35f, MATERIAL_DIFFUSE, vec3(0.f, 0.f, 1.f), vec3(0, 0, 0)         },
    { vec3(2.75f, 0.75f, -7.5),  1.09f, MATERIAL_SPECULAR, vec3(.625f, .325f, 0.125f), vec3(0, 0, 0) },
    { vec3(0., 1.88f, -5),        .0035f, MATERIAL_DIFFUSE, vec3(1, 1, 1), vec3(1, 1, 1)                   },
    // Planes
    { vec3(1, 0, 0),             1.28f, MATERIAL_DIFFUSE, vec3(0.75, .25, .25), vec3(0, 0, 0)         },
    { vec3(0, 1, 0),             0.75f, MATERIAL_DIFFUSE, vec3(0.5, 0.5, 0.5), vec3(0, 0, 0)               }
};

bool IntersectsWithSphere(Primitive sphere, vec3 origin, vec3 ray, out float t)
{
    vec3 v = sphere.m_Position - origin;
    float b = dot(v, ray);
    if (b < 0.f) return false;

    float d2 = dot(v, v) - b * b;
    if (d2 > sphere.m_Distance * sphere.m_Distance) return false;

    float det = sqrt(sphere.m_Distance * sphere.m_Distance - d2);
    float t0 = b - det;
    float t1 = b + det;

    if (t0 < 0.f) t0 = t1;
    t = t0;

    return true;
}

bool IntersectsWithPlane(Primitive plane, vec3 origin, vec3 ray, out float t)
{
    float l = dot(ray, plane.m_Position);
    if (abs(l) > EPSILON)
    {
        float dist = -(dot(plane.m_Position, origin) + plane.m_Distance) / l;
        if (dist > 0.f)
        {
            t = dist;

            return true;
        }
    }

    return false;
}

int FindNearest(vec3 origin, vec3 ray, out float hit, out vec3 n)
{
    int primIdx = -1;
    float t = INFINITY;

    // Check intersection with spheres
    for (int i = 0; i < NUM_SPHERES; i++)
    {
        Primitive sphere = g_Primitives[i];

        float t1 = 0.f;
        if (IntersectsWithSphere(sphere, origin, ray, t1))
        {
            if (t1 < t)
            {
                primIdx = i;
                t = t1;
                vec3 hit = origin + ray * t;
                n = normalize(hit - sphere.m_Position);
            }
        }
    }

    // Check intersection with planes
    for (int i = NUM_SPHERES; i < NUM_SPHERES + NUM_PLANES; i++)
    {
        Primitive plane = g_Primitives[i];

        float t1 = 0.f;
        if (IntersectsWithPlane(plane, origin, ray, t1))
        {
            if (t1 < t)
            {
                primIdx = i;
                t = t1;
                n = plane.m_Position;
            }
        }
    }

    hit = t;

    return  primIdx;
}

void formLocalCS(const vec3 N, out vec3 Nt, out vec3 Nb)
{
    if (abs(N.x) > abs(N.y))
    {
        float invLen = 1.f / sqrt(N.x * N.x + N.z * N.z);
        Nt = vec3(-N.z * invLen, 0.0f, N.x * invLen);
    }
    else
    {
        float invLen = 1.0f / sqrt(N.y * N.y + N.z * N.z);
        Nt = vec3(0.0f, N.z * invLen, -N.y * invLen);
    }

    Nb = cross(N, Nt);
}

// Generate a uniformly sampled direction
vec3 generateSampleDirOverHemisphere(float r1, float r2)
{
    const float sint = sqrt(1.f - r1 * r1);
    const float phi = 2.f * M_PI * r2;

    return vec3(sint * cos(phi), r1, sint * sin(phi));
}

float rand(vec2 uv, in float seed)
{
    float PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   
    float SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two

    return fract(tan(distance(uv * ( seed + PHI), vec2(PHI, M_PI))) * SQ2);
}

vec3 Trace(vec3 origin, vec3 ray)
{
    int primIdx = -1;
    int matType = -1;

    vec3 radiance = vec3(1, 1, 1);

    for (int i = 0; i < MAX_DEPTH; i++)
    {
        vec3 n = vec3(0, 0, 0);
        float t = 0.f;

        // Check intersection of ray with objects in the scene
        primIdx = FindNearest(origin, ray, t, n);
        if (primIdx != -1)
        {
            // Ray hit, continue iteration
            vec3 hit = origin + ray * t;

            matType = g_Primitives[primIdx].m_MatType;

            switch (matType)
            {
            case MATERIAL_DIFFUSE:
                vec3 Nt, Nb;
                formLocalCS(n, Nt, Nb);
                float r1 = rand(gl_GlobalInvocationID.xy, t);
                float r2 = rand(gl_GlobalInvocationID.yx, t);
                vec3 uniSample = generateSampleDirOverHemisphere(r1, r2);
                float sx = dot(uniSample, vec3(Nb.x, n.x, Nt.x));
                float sy = dot(uniSample, vec3(Nb.y, n.y, Nt.y));
                float sz = dot(uniSample, vec3(Nb.z, n.z, Nt.z));
                vec3 sampleProjected = vec3(sx, sy, sz);
                origin = hit + sampleProjected * 1e-5;
                ray = sampleProjected;
                radiance *= g_Primitives[primIdx].m_Kd + g_Primitives[primIdx].m_Le;
                break;
            case MATERIAL_SPECULAR:
                vec3 refldir = reflect(ray, n);
                radiance *= g_Primitives[primIdx].m_Kd;
                origin = hit + refldir * 1e-5;
                ray = refldir;
                break;
            case MATERIAL_REFRACT:
                float ior = 1.55f;
                float R0 = (1.0f - ior) / (1.0 + ior);
                R0 = R0 * R0;
                vec3 nn = (dot(n, ray) > 0.f ? -n : n);
                ior = 1.f / ior;
                float cost1 = -(dot(nn, ray));
                float cost2 = 1.0f - ior * ior * (1.0f - cost1 * cost1);
                vec3 refrDir = normalize(ray + nn * (cost1 * 2.f));
                origin = hit + refrDir * 1e-5;
                ray = refrDir;
                break;
            }
        }
        else
        {
            // Ray miss, stop
            radiance *= vec3(0.5, 0.5, 0.5);
            break;
        }
    }

    return radiance;
}

void main()
{
    vec2 pixelCoords = gl_GlobalInvocationID.xy;

    float scale = tan(FOV * 0.5);
    float aspect = WIDTH / HEIGHT;
    vec3 origin = vec3(0, 0, 0);

    vec3 radiance = vec3(0, 0, 0);
    for (int s = 0; s < NUM_SAMPLES; s++)
    {
        float r = rand(pixelCoords, scale);

        float dx = (2 * (pixelCoords.x + 0.5f) / WIDTH - 1) * aspect * scale;
        float dy = (1 - 2 * (pixelCoords.y + 0.5f) / HEIGHT) * scale;
        vec3 ray = normalize(vec3(dx + r / 1000, dy + r / 1000, -1));
        radiance += pow(Trace(origin, ray), vec3(1 / 2.2));
    }

	imageStore(u_result_image, ivec2(pixelCoords), vec4(radiance / NUM_SAMPLES, 1));
}